# -*- coding: utf-8 -*-

from Liquirizia.EventRunner import EventRunnerProperties
from Liquirizia.EventRunner.Types import EventWorker
from Liquirizia.EventRunner.Errors import InvalidHeaderError, InvalidBodyError

from Liquirizia.Validator import Validator, Error, Pattern
from Liquirizia.Validator.Patterns import *

from SampleEventRunner import SampleEventRunner
from SampleErrorFactory import SampleErrorFactory
from SampleEventRunnerComplete import SampleEventRunnerComplete
from SampleEventRunnerError import SampleEventRunnerError


class IsCompare(Pattern):
	def __init__(self, error: Error = None):
		self.error = error
		return

	def __call__(self, parameter):
		if not parameter['a'] > parameter['b']:
			if self.error:
				raise self.error(parameter)
			raise RuntimeError('a must be greater than b')
		return parameter


properties = EventRunnerProperties(
	SampleEventRunner,
	type=EventWorker('EVENT_SAMPLE_COMPUTE', 'Sample', 'QUEUE_SAMPLE'),
	header=Validator(
		IsRequiredInDictionary('a', 'b', error=SampleErrorFactory('a 와 b 가 필요합니다.', InvalidHeaderError)),
		IsDictionary({
			'a': Validator(IsInteger(error=SampleErrorFactory('a 는 정수 이어야 합니다.', InvalidHeaderError))),
			'b': Validator(IsInteger(error=SampleErrorFactory('b 는 정수 이어야 합니다.', InvalidHeaderError))),
		}, error=SampleErrorFactory('올바르지 않은 형식 입니다.', InvalidHeaderError)),
		IsCompare(error=SampleErrorFactory('a 는 b 보다 커야 합니다.', InvalidHeaderError))
	),
	body=Validator(
		IsRequiredInDictionary('c', error=SampleErrorFactory('c 가 필요합니다.', InvalidBodyError)),
		IsDictionary({
			'c': Validator(
				IsInteger(
					IsGreaterThan(0, error=SampleErrorFactory('C 는 0 보다 커야 합니다.', InvalidBodyError)),
					error=SampleErrorFactory('c 는 정수 이어야 합니다.', InvalidBodyError)
				)
			)
		})
	),
	completes=(
		SampleEventRunnerComplete(),
	),
	errors=SampleEventRunnerError()
)
