# -*- coding: utf-8 -*-

from Liquirizia.WebApplication import RequestRunnerProperties, RequestRunnerPropertiesHelper

from Liquirizia.WebApplication.Validator import Validator
from Liquirizia.WebApplication.Validator.Patterns import *

from SampleRequestRunner import SampleRequestRunner
from errors import *

properties = RequestRunnerProperties(
	SampleRequestRunner,
	method='POST',
	url='/sample/:id',
	qs=Validator(
		IsRequiredInDictionary('a', 'b', error=RequiredError('질의에 a 와 b 는 필수 입니다.')),
		IsDictionary({
			'a': Validator(
				TypeEvaluate(),
				IsInteger(
					IsGreaterThan(5, errorResponse=BadRequestErrorResponse('a 는 5보다 커야 합니다')),
					errorResponse=BadRequestErrorResponse('a 는 정수를 필요로 합니다.')
				)
			),
			'b': Validator(
				TypeEvaluate(),
				IsFloat(
					IsGreaterThan(9, errorResponse=BadRequestErrorResponse('b 는 9보다 커야 합니다')),
					errorResponse=BadRequestErrorResponse('b 는 실수(부동 소수점)을 필요로 합니다.')
				)
			),
			'c': Validator(
				SetDefault(''),
				IsString(errorResponse=BadRequestErrorResponse('c 는 문자열을 필요로 합니다.'))
			),
		}),
	),
	body=Validator(
		IsRequiredInDictionary('a', 'b', error=RequiredError('본문에 a 와 b 가 필요합니다.')),
		IsDictionary({
			'a': Validator(
				TypeEvaluate(),
				IsInteger(
					IsLessThan(5, errorResponse=BadRequestErrorResponse('a 는 5보다 작아야 합니다')),
					errorResponse=BadRequestErrorResponse('a 는 정수를 필요로 합니다.')
				)
			),
			'b': Validator(
				TypeEvaluate(),
				IsFloat(
					IsLessThan(9, errorResponse=BadRequestErrorResponse('b 는 9보다 작아야 합니다')),
					errorResponse=BadRequestErrorResponse('b 는 실수(부동 소수점)을 필요로 합니다.')
				)
			),
		}),
	)
)
